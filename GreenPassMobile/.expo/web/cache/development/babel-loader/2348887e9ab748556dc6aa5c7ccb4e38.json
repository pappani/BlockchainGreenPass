{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Scanner() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n        data = _ref.data;\n    setScanned(true);\n    alert('Done:' + type + \" \" + data);\n  };\n\n  if (hasPermission === null) {\n    return _jsx(Text, {\n      children: \"Requesting Camera Permission\"\n    });\n  }\n\n  if (hasPermission === false) {\n    return _jsx(Text, {\n      children: \"No Access to Camera\"\n    });\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(BarCodeScanner, {\n      onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n      style: StyleSheet.absoluteFillObject\n    }), scanned && _jsx(Button, {\n      title: \"Tap to Scan Again\",\n      onPress: function onPress() {\n        return setScanned(false);\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/pappa/OneDrive/Progetti/DAPP/GreenPassMobile/screens/Scanner.js"],"names":["React","useState","useEffect","BarCodeScanner","Scanner","hasPermission","setHasPermission","scanned","setScanned","requestPermissionsAsync","status","handleBarCodeScanned","type","data","alert","styles","container","undefined","StyleSheet","absoluteFillObject","create","flex","flexDirection","justifyContent"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;;;;;;AAEA,SAASC,cAAT,QAA+B,sBAA/B;;;AAEA,eAAe,SAASC,OAAT,GAAkB;AAC7B,kBAA0CH,QAAQ,CAAC,IAAD,CAAlD;AAAA;AAAA,MAAOI,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,mBAA8BL,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOM,OAAP;AAAA,MAAgBC,UAAhB;;AAEAN,EAAAA,SAAS,CAAC,YAAM;AACZ,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC4BC,cAAc,CAACM,uBAAf,EAD5B;;AAAA;AAAA;AACWC,cAAAA,MADX,yBACWA,MADX;AAEGJ,cAAAA,gBAAgB,CAACI,MAAM,KAAK,SAAZ,CAAhB;;AAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAIH,GALQ,EAKN,EALM,CAAT;;AAMA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAoB;AAAA,QAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,QAAXC,IAAW,QAAXA,IAAW;AAC7CL,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAM,IAAAA,KAAK,CAAC,UAAQF,IAAR,GAAa,GAAb,GAAiBC,IAAlB,CAAL;AACH,GAHD;;AAKA,MAAIR,aAAa,KAAK,IAAtB,EAA2B;AACvB,WAAO,KAAC,IAAD;AAAA;AAAA,MAAP;AACH;;AAED,MAAIA,aAAa,KAAK,KAAtB,EAA4B;AACxB,WAAO,KAAC,IAAD;AAAA;AAAA,MAAP;AACH;;AAED,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEU,MAAM,CAACC,SAApB;AAAA,eACI,KAAC,cAAD;AACI,MAAA,gBAAgB,EAAET,OAAO,GAAGU,SAAH,GAAeN,oBAD5C;AAEI,MAAA,KAAK,EAAIO,UAAU,CAACC;AAFxB,MADJ,EAKKZ,OAAO,IAAI,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,mBAAd;AAAkC,MAAA,OAAO,EAAE;AAAA,eAAMC,UAAU,CAAC,KAAD,CAAhB;AAAA;AAA3C,MALhB;AAAA,IADJ;AASH;AAED,IAAMO,MAAM,GAAGG,UAAU,CAACE,MAAX,CAAkB;AAC7BJ,EAAAA,SAAS,EAAC;AACNK,IAAAA,IAAI,EAAC,CADC;AAENC,IAAAA,aAAa,EAAC,QAFR;AAGNC,IAAAA,cAAc,EAAC;AAHT;AADmB,CAAlB,CAAf","sourcesContent":["import React, { useState,useEffect } from 'react'\r\nimport { Text, View, StyleSheet, Button, Linking } from 'react-native'\r\nimport { BarCodeScanner } from 'expo-barcode-scanner'\r\n\r\nexport default function Scanner(){\r\n    const [hasPermission, setHasPermission] = useState(null)\r\n    const [scanned, setScanned] = useState(false)\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const { status } = await BarCodeScanner.requestPermissionsAsync()\r\n            setHasPermission(status === 'granted')\r\n        })()\r\n    }, [])\r\n    const handleBarCodeScanned = ({ type, data }) => {\r\n        setScanned(true)\r\n        alert('Done:'+type+\" \"+data)\r\n    }\r\n\r\n    if (hasPermission === null){\r\n        return <Text>Requesting Camera Permission</Text>\r\n    }\r\n\r\n    if (hasPermission === false){\r\n        return <Text>No Access to Camera</Text>\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <BarCodeScanner \r\n                onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\r\n                style = {StyleSheet.absoluteFillObject}\r\n            />\r\n            {scanned && <Button title='Tap to Scan Again' onPress={() => setScanned(false)} />}\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container:{\r\n        flex:1,\r\n        flexDirection:'column',\r\n        justifyContent:'center'\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}